generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRADOR
  ASESOR
  SECRETARIA
  CLIENTE
  USUARIO
}

enum EstadoInmueble {
  DISPONIBLE
  RESERVADO
  VENDIDO
  CON_OFERTA
}

enum EstadoCotizacion {
  PENDIENTE
  ACEPTADA
  RECHAZADA
}

enum EstadoVenta {
  PENDIENTE
  PAGADO
  CANCELADO
}

enum EstadoReserva {
  ACTIVA
  VENCIDA
  CANCELADA
  CONVERTIDA_EN_VENTA
}

enum EstadoTicket {
  ABIERTO
  EN_PROCESO
  CERRADO
}

enum EstadoVisita {
  PENDIENTE
  REALIZADA
  CANCELADA
}

enum EstadoPlanFinanciamiento {
  ACTIVO
  FINALIZADO
  CANCELADO
}

enum EstadoCuota {
  PENDIENTE
  PAGADA
  VENCIDA
}

enum MetodoPago {
  EFECTIVO
  TRANSFERENCIA
  TARJETA
}

enum TipoInmueble {
  LOTE
  URBANIZACION
}

enum PeriodicidadPago {
  DIAS
  SEMANAS
  MESES
}

enum EstadoPlanPago {
  ACTIVO
  PAGADO
  MOROSO
  CANCELADO
}
model User {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  fullName     String    @map("full_name")
  username     String?    @unique
  ci           String    @unique
  email        String?    @unique
  passwordHash String?    @map("password_hash")
  avatarUrl    String?   @map("avatar_url")
  telefono     String    @unique
  direccion    String?
  observaciones String?
  role         UserRole  @default(CLIENTE)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  estado       Boolean   @default(true)
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Campos de seguridad
  failedAttempts       Int       @default(0) @map("failed_attempts")
  lockUntil            DateTime? @map("lock_until")
  resetPasswordToken   String?   @map("reset_password_token")
  resetPasswordExpires DateTime? @map("reset_password_expires")

  // Relaciones
  cotizacionesComoCliente Cotizacion[] @relation("CotizacionesCliente")
  cotizacionesComoAsesor  Cotizacion[] @relation("CotizacionesAsesor")
  ventasComoCliente       Venta[]      @relation("VentasCliente")
  ventasComoAsesor        Venta[]      @relation("VentasAsesor")
  reservasComoCliente     Reserva[]    @relation("ReservasCliente")
  reservasComoAsesor      Reserva[]    @relation("ReservasAsesor")
  visitasComoCliente      Visita[]     @relation("VisitasCliente")
  visitasComoAsesor       Visita[]     @relation("VisitasAsesor")
  ticketsCreados          Ticket[]     @relation("TicketsCliente")
  ticketsAtendidos        Ticket[]     @relation("TicketsAtendidos")
  auditorias              Auditoria[]
  ingresosRegistrados     Ingreso[]
  egresosRegistrados      Egreso[]
  cajasApertura      Caja[]           @relation("UsuarioApertura")
  movimientosCaja    MovimientoCaja[]
  cierresCaja        CierreCaja[]
}

model Urbanizacion {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  nombre      String
  ubicacion   String
  descripcion String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  lotes    Lote[]
  archivos Archivo[]
}

model Lote {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique @default(uuid())
  urbanizacionId Int
  numeroLote     String         @map("numero_lote")
  superficieM2   Decimal        @map("superficie_m2") @db.Decimal(10, 2)
  precioBase     Decimal        @map("precio_base") @db.Decimal(12, 2)
  descripcion    String?
  ubicacion      String? 
  latitud        Decimal?       @db.Decimal(10, 7)
  longitud       Decimal?       @db.Decimal(10, 7)
  estado         EstadoInmueble @default(DISPONIBLE)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  urbanizacion Urbanizacion @relation(fields: [urbanizacionId], references: [id])
  archivos     Archivo[]    
  cotizaciones Cotizacion[] @relation("CotizacionesLote")
  ventas       Venta[]      @relation("VentasLote")
  reservas     Reserva[]    @relation("ReservasLote")
  visitas      Visita[]     @relation("VisitasLote")
}

// model Imagen {
//   id           Int          @id @default(autoincrement())
//   uuid         String       @unique @default(uuid())
//   inmuebleTipo TipoInmueble
//   inmuebleId   Int
//   urlImagen    String       @map("url_imagen")
//   descripcion  String?
//   orden        Int          @default(0)
//   subidoPor    Int
//   createdAt    DateTime     @default(now()) @map("created_at")
//   updatedAt    DateTime     @updatedAt @map("updated_at")

//   usuario      User          @relation(fields: [subidoPor], references: [id])
//   urbanizacion Urbanizacion? @relation("ImagenesUrbanizacion", fields: [inmuebleId], references: [id], map: "fk_imagen_urbanizacion")
//   lote         Lote?         @relation("ImagenesLote", fields: [inmuebleId], references: [id], map: "fk_imagen_lote")
// }

model Cotizacion {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  clienteId      Int
  asesorId       Int
  inmuebleTipo   TipoInmueble     @default(LOTE)
  inmuebleId     Int
  precioOfertado Decimal          @map("precio_ofertado") @db.Decimal(12, 2)
  estado         EstadoCotizacion @default(PENDIENTE)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  cliente User  @relation("CotizacionesCliente", fields: [clienteId], references: [id])
  asesor  User  @relation("CotizacionesAsesor", fields: [asesorId], references: [id])
  lote    Lote? @relation("CotizacionesLote", fields: [inmuebleId], references: [id], map: "fk_cotizacion_lote")
}

model Venta {
  id           Int          @id @default(autoincrement())
  uuid         String       @unique @default(uuid())
  clienteId    Int
  asesorId     Int
  inmuebleTipo TipoInmueble @default(LOTE)
  inmuebleId   Int
  precioFinal  Decimal      @map("precio_final") @db.Decimal(12, 2)
  estado       EstadoVenta  @default(PENDIENTE)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  cliente            User                @relation("VentasCliente", fields: [clienteId], references: [id])
  asesor             User                @relation("VentasAsesor", fields: [asesorId], references: [id])
  lote               Lote?               @relation("VentasLote", fields: [inmuebleId], references: [id], map: "fk_venta_lote")
  archivos        Archivo[]
  ingresos           Ingreso[]
  planPago      PlanPago?

}

model Reserva {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(uuid())
  clienteId        Int
  asesorId         Int
  inmuebleTipo     TipoInmueble  @default(LOTE)
  inmuebleId       Int
  montoReserva     Decimal       @map("monto_reserva") @db.Decimal(12, 2)
  fechaInicio      DateTime      @map("fecha_inicio")
  fechaVencimiento DateTime      @map("fecha_vencimiento")
  estado           EstadoReserva @default(ACTIVA)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  cliente    User        @relation("ReservasCliente", fields: [clienteId], references: [id])
  asesor     User        @relation("ReservasAsesor", fields: [asesorId], references: [id])
  lote       Lote?       @relation("ReservasLote", fields: [inmuebleId], references: [id], map: "fk_reserva_lote")
  archivios Archivo[]
}



model Visita {
  id           Int          @id @default(autoincrement())
  uuid         String       @unique @default(uuid())
  clienteId    Int
  asesorId     Int
  inmuebleTipo TipoInmueble @default(LOTE)
  inmuebleId   Int
  fechaVisita  DateTime     @map("fecha_visita")
  estado       EstadoVisita @default(PENDIENTE)
  comentarios  String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  cliente User  @relation("VisitasCliente", fields: [clienteId], references: [id])
  asesor  User  @relation("VisitasAsesor", fields: [asesorId], references: [id])
  lote    Lote? @relation("VisitasLote", fields: [inmuebleId], references: [id], map: "fk_visita_lote")
}

model Ticket {
  id          Int          @id @default(autoincrement())
  uuid        String       @unique @default(uuid())
  clienteId   Int
  asunto      String
  mensaje     String
  estado      EstadoTicket @default(ABIERTO)
  atendidoPor Int?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  cliente  User  @relation("TicketsCliente", fields: [clienteId], references: [id])
  atendido User? @relation("TicketsAtendidos", fields: [atendidoPor], references: [id])
}

model Promocion {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  titulo      String
  descripcion String?
  descuento   Decimal  @db.Decimal(5, 2)
  fechaInicio DateTime @map("fecha_inicio")
  fechaFin    DateTime @map("fecha_fin")
  aplicaA     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Auditoria {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique @default(uuid())
  usuarioId       Int?
  accion          String
  tablaAfectada   String   @map("tabla_afectada")
  columnaAfectada String?  @map("columna_afectada")
  registroId      Int?     @map("registro_id")
  datosAntes      String?  @map("datos_antes")
  datosDespues    String?  @map("datos_despues")
  ip              String?
  dispositivo     String?
  createdAt       DateTime @default(now()) @map("created_at")

  usuario User? @relation(fields: [usuarioId], references: [id])
}



///pendiente a revisar o cambiar
model CategoriaContable {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  nombre    String
  tipo      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ingresos Ingreso[]
  egresos  Egreso[]
}

model Ingreso {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  fecha         DateTime @default(now())
  monto         Decimal  @db.Decimal(12, 2)
  descripcion   String
  categoriaId   Int
  ventaId       Int?
  registradoPor Int      @map("registrado_por")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  categoria CategoriaContable @relation(fields: [categoriaId], references: [id])
  venta     Venta?            @relation(fields: [ventaId], references: [id])
  usuario   User              @relation(fields: [registradoPor], references: [id])
}

model Egreso {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  fecha         DateTime @default(now())
  monto         Decimal  @db.Decimal(12, 2)
  descripcion   String
  categoriaId   Int
  registradoPor Int      @map("registrado_por")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  categoria CategoriaContable @relation(fields: [categoriaId], references: [id])
  usuario   User              @relation(fields: [registradoPor], references: [id])
}

model BalanceMensual {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  mes           Int
  anio          Int
  totalIngresos Decimal  @map("total_ingresos") @db.Decimal(12, 2)
  totalEgresos  Decimal  @map("total_egresos") @db.Decimal(12, 2)
  utilidad      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

model PlanPago {
  id_plan_pago      Int              @id @default(autoincrement())
  uuid              String           @unique @default(uuid())
  ventaId           Int              @unique
  total             Decimal          @db.Decimal(12, 2)
  monto_inicial     Decimal          @db.Decimal(12, 2)
  plazo             Int
  periodicidad      PeriodicidadPago
  fecha_inicio      DateTime
  fecha_vencimiento DateTime
  estado            EstadoPlanPago   @default(ACTIVO)
  creado_en         DateTime         @default(now())
  actualizado_en    DateTime         @updatedAt

  venta   Venta          @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  pagos   PagoPlanPago[]

  @@map("planes_pago")
}

model PagoPlanPago {
  id_pago_plan Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  plan_pago_id Int
  monto        Decimal  @db.Decimal(12, 2)
  fecha_pago   DateTime @default(now())
  observacion  String?
  creado_en    DateTime @default(now())

  planPago PlanPago @relation(fields: [plan_pago_id], references: [id_plan_pago], onDelete: Cascade)

  @@map("pagos_plan_pago")
}

enum EstadoCaja {
  ABIERTA
  CERRADA
}

enum TipoMovimiento {
  INGRESO
  EGRESO
}

enum TipoCierre {
  PARCIAL
  TOTAL
}

model Caja {
  id                Int        @id @default(autoincrement())
  uuid              String     @unique @default(uuid())
  nombre            String     @db.VarChar(100)
  saldoActual       Decimal    @default(0) @db.Decimal(12, 2)
  montoInicial      Decimal    @db.Decimal(12, 2)
  creadoEn          DateTime   @default(now())
  actualizadoEn     DateTime   @updatedAt
  estado            EstadoCaja @default(ABIERTA)
  usuarioAperturaId Int
  usuarioApertura   User       @relation("UsuarioApertura", fields: [usuarioAperturaId], references: [id])

  movimientos MovimientoCaja[]
  cierreCaja  CierreCaja[]

  @@map("cajas")
}

model MovimientoCaja {
  id          Int            @id @default(autoincrement())
  uuid        String         @unique @default(uuid())
  cajaId      Int
  usuarioId   Int
  tipo        TipoMovimiento
  monto       Decimal        @db.Decimal(12, 2)
  fecha       DateTime       @default(now())
  descripcion String?
  referencia  String?
  metodoPago  MetodoPago     @default(EFECTIVO)
  caja        Caja           @relation(fields: [cajaId], references: [id])
  usuario     User           @relation(fields: [usuarioId], references: [id])

  @@map("movimientos_caja")
}

model CierreCaja {
  id            Int        @id @default(autoincrement())
  cajaId        Int
  usuarioId     Int
  fechaCierre   DateTime   @default(now())
  saldoInicial  Decimal    @db.Decimal(12, 2)
  saldoFinal    Decimal    @db.Decimal(12, 2)
  saldoReal     Decimal    @db.Decimal(12, 2)
  diferencia    Decimal    @db.Decimal(12, 2)
  tipo          TipoCierre @default(TOTAL)
  observaciones String?
  caja          Caja       @relation(fields: [cajaId], references: [id])
  usuario       User       @relation(fields: [usuarioId], references: [id])

  @@map("cierre_caja")
}

model Archivo {
  id             Int           @id @default(autoincrement())
  uuid           String        @unique @default(uuid())
  ventaId        Int?
  reservaId  Int?
  urbanizacionId   Int?
  urlArchivo     String
  tipoArchivo    String?
  nombreArchivo  String?
  loteId  Int?
  creado_en      DateTime      @default(now())
  updatedAt  DateTime @updatedAt @map("updated_at")
  venta   Venta?   @relation(fields: [ventaId], references: [id])
  lote    Lote?    @relation(fields: [loteId],references: [id])
  reserva Reserva? @relation(fields: [reservaId], references: [id])
  urbanizacion Urbanizacion? @relation(fields: [urbanizacionId],references: [id])
}